import {expect, test} from '@playwright/test'
import {
	EXERCISE_DATA,
	LANGUAGES,
	THEMES,
	VIEWPORT_SIZES
} from '../fixtures/test-data'
import {ExerciseLibrary} from '../pages/ExerciseLibrary'
import {ExercisePage} from '../pages/ExercisePage'
import {HomePage} from '../pages/HomePage'

// Test functions split for readability
async function testDesktopLayoutOnHomepage({page}) {
	const homePage = new HomePage(page)

	await homePage.goto()
	await homePage.expectPageLoaded()

	// Theme toggle should be visible in header on desktop
	await expect(homePage.themeToggle).toBeVisible()

	// Language dropdown should be visible in header on desktop
	await expect(homePage.uiLanguageDropdown).toBeVisible()

	// Mobile menu button should not be visible on desktop
	const menuButton = page.getByRole('button', {name: /menu|μενού|меню/i})
	await expect(menuButton).not.toBeVisible()
}

async function testDesktopThemeSwitching({page}) {
	const homePage = new HomePage(page)

	await homePage.goto()
	await homePage.expectTheme(THEMES.light)

	// Theme toggle should be directly accessible in header
	await expect(homePage.themeToggle).toBeVisible()
	await homePage.toggleTheme()

	await homePage.expectTheme(THEMES.dark)

	// Toggle back
	await homePage.toggleTheme()
	await homePage.expectTheme(THEMES.light)
}

async function testDesktopLanguageSwitching({page}) {
	const homePage = new HomePage(page)

	await homePage.goto()
	await homePage.expectUILanguage(LANGUAGES.ui.greek)

	// Language dropdown should be directly accessible in header
	await homePage.selectUILanguage(LANGUAGES.ui.english)
	await homePage.expectUILanguage(LANGUAGES.ui.english)
	await homePage.expectHeadingText('Learn Greek')

	// Switch to Russian
	await homePage.selectUILanguage(LANGUAGES.ui.russian)
	await homePage.expectUILanguage(LANGUAGES.ui.russian)
	await homePage.expectHeadingText('Учим греческий')

	// Switch back to Greek
	await homePage.selectUILanguage(LANGUAGES.ui.greek)
	await homePage.expectUILanguage(LANGUAGES.ui.greek)
	await homePage.expectHeadingText('Μάθε Ελληνικά')
}

async function testDesktopHeaderNavigation({page}) {
	const homePage = new HomePage(page)
	await homePage.goto()

	// All header elements should be visible on desktop
	const headerLinks = page.locator('header a')
	const linkCount = await headerLinks.count()
	expect(linkCount).toBeGreaterThan(1) // Should have multiple header links

	// Logo should be visible
	const logo = page
		.locator('header')
		.getByText(/Learn Greek|Μάθε Ελληνικά|Учим греческий/)
	await expect(logo).toBeVisible()
}

async function testDesktopExerciseInterface({page}) {
	const exerciseLibrary = new ExerciseLibrary(page)
	const exercisePage = new ExercisePage(page)

	await exerciseLibrary.goto()
	await exerciseLibrary.startFirstExercise()
	await exercisePage.expectPageLoaded()

	// Exercise interface should be optimized for desktop
	await exercisePage.expectInputVisible()
	await exercisePage.expectInputFocused()

	// Desktop should show full exercise controls
	await expect(exercisePage.autoAdvanceToggle).toBeVisible()
	await expect(exercisePage.exerciseProgress).toBeVisible()
	await expect(exercisePage.backButton).toBeVisible()
}

async function testDesktopExerciseCompletion({page}) {
	const exerciseLibrary = new ExerciseLibrary(page)
	const exercisePage = new ExercisePage(page)

	await exerciseLibrary.goto()
	await exerciseLibrary.startFirstExercise()

	// Complete exercise with desktop-optimized flow
	await exercisePage.answerUntilCompletion(EXERCISE_DATA.verbsBe.correctAnswers)
	await exercisePage.expectExerciseCompleted()

	// Desktop completion screen should show all options
	const restartButton = page.getByRole('button', {name: /try again|restart/i})
	const exitButton = page.getByRole('button', {name: /back to library|exit/i})

	await expect(restartButton).toBeVisible()
	await expect(exitButton).toBeVisible()
}

test.describe('Desktop Responsive Design', () => {
	test.beforeEach(async ({page}) => {
		await page.setViewportSize(VIEWPORT_SIZES.desktop)
	})

	test('should display desktop layout on homepage', testDesktopLayoutOnHomepage)

	test('should handle desktop theme switching', testDesktopThemeSwitching)

	test('should handle desktop language switching', testDesktopLanguageSwitching)

	test(
		'should display full header navigation on desktop',
		testDesktopHeaderNavigation
	)

	test('should handle desktop exercise interface', testDesktopExerciseInterface)

	test(
		'should optimize exercise completion for desktop',
		testDesktopExerciseCompletion
	)
})
