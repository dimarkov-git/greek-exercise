import {expect, test} from '@playwright/test'
import {ROUTES} from '../fixtures/selectors'
import {ExerciseLibrary} from '../pages/ExerciseLibrary'
import {ExercisePage} from '../pages/ExercisePage'
import {HomePage} from '../pages/HomePage'

test.describe('Navigation', () => {
	test('should render homepage with navigation cards', async ({page}) => {
		const homePage = new HomePage(page)

		await homePage.goto()
		await homePage.expectPageLoaded()
	})

	test('should navigate from homepage to exercise library', async ({page}) => {
		const homePage = new HomePage(page)
		const exerciseLibrary = new ExerciseLibrary(page)

		await homePage.goto()
		await homePage.clickExercisesCard()

		await expect(page).toHaveURL(ROUTES.EXERCISES)
		await exerciseLibrary.expectPageLoaded()
	})

	test('should navigate from exercise library to exercise', async ({page}) => {
		const exerciseLibrary = new ExerciseLibrary(page)
		const exercisePage = new ExercisePage(page)

		await exerciseLibrary.goto()
		await exerciseLibrary.startFirstExercise()

		await expect(page).toHaveURL(ROUTES.EXERCISE_VERBS_BE)
		await exercisePage.expectPageLoaded()
	})

	test('should navigate back from exercise to library', async ({page}) => {
		const exerciseLibrary = new ExerciseLibrary(page)
		const exercisePage = new ExercisePage(page)

		await exerciseLibrary.goto()
		await exerciseLibrary.startFirstExercise()
		await exercisePage.expectPageLoaded()

		await exercisePage.clickBackButton()

		await expect(page).toHaveURL(ROUTES.EXERCISES)
		await exerciseLibrary.expectPageLoaded()
	})

	test('should have correct link count on homepage', async ({page}) => {
		await page.goto('/')

		// Check that we have the expected navigation elements
		// Desktop: Header links + 2 navigation cards + footer links
		// Mobile: Fewer header links but same cards
		const linkCount = await page.getByRole('link').count()
		expect(linkCount).toBeGreaterThanOrEqual(4) // At least cards + footer
		expect(linkCount).toBeLessThanOrEqual(10) // Reasonable upper bound
	})

	test('should navigate to specific exercise types', async ({page}) => {
		const exerciseLibrary = new ExerciseLibrary(page)
		const exercisePage = new ExercisePage(page)

		await exerciseLibrary.goto()

		// Test first exercise (verbs-be)
		await exerciseLibrary.startFirstExercise()
		await expect(page).toHaveURL(ROUTES.EXERCISE_VERBS_BE)
		await exercisePage.expectPageLoaded()

		// Go back and test second exercise
		await exercisePage.clickBackButton()
		await exerciseLibrary.startSecondExercise()
		await expect(page).toHaveURL(ROUTES.EXERCISE_VERBS_HAVE)
		await exercisePage.expectPageLoaded()
	})

	test('should show exercise count in library', async ({page}) => {
		const exerciseLibrary = new ExerciseLibrary(page)

		await exerciseLibrary.goto()
		await exerciseLibrary.expectExerciseCardsVisible()

		// Verify we have at least 2 exercises available
		const cardCount = await exerciseLibrary.exerciseCards.count()
		expect(cardCount).toBeGreaterThanOrEqual(2)
	})

	test('should handle direct URL navigation', async ({page}) => {
		const exercisePage = new ExercisePage(page)

		// Direct navigation to exercise should work
		await page.goto('/exercise/verbs-be')
		await exercisePage.expectPageLoaded()

		// Should be able to navigate back
		await exercisePage.clickBackButton()
		await expect(page).toHaveURL(ROUTES.EXERCISES)
	})
})
