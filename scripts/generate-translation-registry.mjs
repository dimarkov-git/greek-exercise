#!/usr/bin/env node
// biome-ignore lint/correctness/noNodejsModules: Node-specific CLI script.
import {mkdir, readFile, writeFile} from 'node:fs/promises'
// biome-ignore lint/correctness/noNodejsModules: Node-specific CLI script.
import path from 'node:path'
// biome-ignore lint/correctness/noNodejsModules: Node-specific CLI script.
import process from 'node:process'
// biome-ignore lint/correctness/noNodejsModules: Node-specific CLI script.
import {fileURLToPath} from 'node:url'

async function readJson(filePath) {
	const content = await readFile(filePath, 'utf8')
	return JSON.parse(content)
}

function toTsStringLiteral(value) {
	return `'${value
		.replace(/\\/g, '\\\\')
		.replace(/'/g, "\\'")
		.replace(/\r?\n/g, '\\n')}'`
}

async function main() {
	const scriptDir = path.dirname(fileURLToPath(import.meta.url))
	const rootDir =
		scriptDir === '.' ? process.cwd() : path.resolve(scriptDir, '..')
	const translationsPath = path.join(
		rootDir,
		'src/mocks/data/translations.json'
	)
	const manualFallbacksPath = path.join(
		rootDir,
		'src/i18n/manual-fallbacks.json'
	)
	const outputDir = path.join(rootDir, 'src/i18n/generated')
	const outputPath = path.join(outputDir, 'translation-registry.ts')

	const translations = await readJson(translationsPath)
	const manualFallbacks = await readJson(manualFallbacksPath)

	const englishFallbacks = translations.en ?? {}
	const keySet = new Set(Object.keys(manualFallbacks))

	for (const language of Object.values(translations)) {
		if (typeof language !== 'object' || language === null) {
			continue
		}

		for (const key of Object.keys(language)) {
			keySet.add(key)
		}
	}

	const keys = [...keySet].sort()

	const lines = keys.map(key => {
		const englishValue = englishFallbacks[key]
		const manualValue = manualFallbacks[key]
		const fallback =
			typeof englishValue === 'string' ? englishValue : (manualValue ?? key)
		return `  '${key}': { fallback: ${toTsStringLiteral(fallback)} },`
	})

	const fileContent = `/* eslint-disable */\n// This file is generated by scripts/generate-translation-registry.mjs\n// Do not edit this file directly.\n\nexport const translationRegistry = {\n${lines.join('\n')}\n} as const;\n\nexport type TranslationRegistry = typeof translationRegistry;\nexport type TranslationRegistryKey = keyof TranslationRegistry;\nexport const TRANSLATION_REGISTRY_KEYS = Object.keys(translationRegistry) as TranslationRegistryKey[];\n`

	await mkdir(outputDir, {recursive: true})
	await writeFile(outputPath, `${fileContent}`)
}

main().catch(_error => {
	process.exitCode = 1
})
